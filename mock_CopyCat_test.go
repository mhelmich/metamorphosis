// Code generated by mockery v1.0.0. DO NOT EDIT.
package main

import copycat "github.com/mhelmich/copycat"
import mock "github.com/stretchr/testify/mock"

// mockCopyCat is an autogenerated mock type for the mockCopyCat type
type mockCopyCat struct {
	mock.Mock
}

// AllocateNewDataStructure provides a mock function with given fields: opts
func (_m *mockCopyCat) AllocateNewDataStructure(opts ...copycat.AllocationOption) (*copycat.ID, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *copycat.ID
	if rf, ok := ret.Get(0).(func(...copycat.AllocationOption) *copycat.ID); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*copycat.ID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...copycat.AllocationOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataStructureID provides a mock function with given fields:
func (_m *mockCopyCat) NewDataStructureID() (*copycat.ID, error) {
	ret := _m.Called()

	var r0 *copycat.ID
	if rf, ok := ret.Get(0).(func() *copycat.ID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*copycat.ID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shutdown provides a mock function with given fields:
func (_m *mockCopyCat) Shutdown() {
	_m.Called()
}

// SubscribeToDataStructure provides a mock function with given fields: id, provider
func (_m *mockCopyCat) SubscribeToDataStructure(id *copycat.ID, provider copycat.SnapshotProvider) (chan<- []byte, <-chan []byte, <-chan error, copycat.SnapshotConsumer, error) {
	ret := _m.Called(id, provider)

	var r0 chan<- []byte
	if rf, ok := ret.Get(0).(func(*copycat.ID, copycat.SnapshotProvider) chan<- []byte); ok {
		r0 = rf(id, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- []byte)
		}
	}

	var r1 <-chan []byte
	if rf, ok := ret.Get(1).(func(*copycat.ID, copycat.SnapshotProvider) <-chan []byte); ok {
		r1 = rf(id, provider)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan []byte)
		}
	}

	var r2 <-chan error
	if rf, ok := ret.Get(2).(func(*copycat.ID, copycat.SnapshotProvider) <-chan error); ok {
		r2 = rf(id, provider)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(<-chan error)
		}
	}

	var r3 copycat.SnapshotConsumer
	if rf, ok := ret.Get(3).(func(*copycat.ID, copycat.SnapshotProvider) copycat.SnapshotConsumer); ok {
		r3 = rf(id, provider)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(copycat.SnapshotConsumer)
		}
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(*copycat.ID, copycat.SnapshotProvider) error); ok {
		r4 = rf(id, provider)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// SubscribeToDataStructureWithStringID provides a mock function with given fields: id, provider
func (_m *mockCopyCat) SubscribeToDataStructureWithStringID(id string, provider copycat.SnapshotProvider) (chan<- []byte, <-chan []byte, <-chan error, copycat.SnapshotConsumer, error) {
	ret := _m.Called(id, provider)

	var r0 chan<- []byte
	if rf, ok := ret.Get(0).(func(string, copycat.SnapshotProvider) chan<- []byte); ok {
		r0 = rf(id, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- []byte)
		}
	}

	var r1 <-chan []byte
	if rf, ok := ret.Get(1).(func(string, copycat.SnapshotProvider) <-chan []byte); ok {
		r1 = rf(id, provider)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan []byte)
		}
	}

	var r2 <-chan error
	if rf, ok := ret.Get(2).(func(string, copycat.SnapshotProvider) <-chan error); ok {
		r2 = rf(id, provider)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(<-chan error)
		}
	}

	var r3 copycat.SnapshotConsumer
	if rf, ok := ret.Get(3).(func(string, copycat.SnapshotProvider) copycat.SnapshotConsumer); ok {
		r3 = rf(id, provider)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(copycat.SnapshotConsumer)
		}
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(string, copycat.SnapshotProvider) error); ok {
		r4 = rf(id, provider)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}
