/*
 * Copyright 2018 Marco Helmich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pb;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

message LogEntry {
  uint64 Offset = 1;
  bytes Key = 2;
  bytes Value = 3;
  // This int enable metamorphosis to create a
  // unique context to wait for in the commit replay.
  // This way append can wait for changes to be committed.
  uint64 Context = 4;
  // Indicates whether this bool is an entry intent or not.
  bool IsIntent = 5;
}

message MetamorphosisLog {
  // this map will contain keys and values from the log in compacted form
  map<string, bytes> state = 1;
  // this will contain all log entries with the map as base state
  repeated LogEntry log = 2;
  // offsets are computed by the position of an intent in the log
  // plus the base offset from previous compactions
  uint64 baseOffset = 3;
}
