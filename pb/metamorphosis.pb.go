// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/metamorphosis.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogEntry struct {
	Offset uint64 `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Value  []byte `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	// This int enable metamorphosis to create a
	// unique context to wait for in the commit replay.
	// This way append can wait for changes to be committed.
	Context uint64 `protobuf:"varint,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptorMetamorphosis, []int{0} }

type LogSnapshot struct {
	// this map will contain keys and values from the log in compacted form
	State *LogSnapshot_SnapState `protobuf:"bytes,1,opt,name=State" json:"State,omitempty"`
	// this will contain all log entries with the map as base state
	Log []*LogEntry `protobuf:"bytes,2,rep,name=Log" json:"Log,omitempty"`
	// offsets are computed by the position of an intent in the log
	// plus the base offset from previous compactions
	BaseOffset uint64 `protobuf:"varint,3,opt,name=BaseOffset,proto3" json:"BaseOffset,omitempty"`
}

func (m *LogSnapshot) Reset()                    { *m = LogSnapshot{} }
func (m *LogSnapshot) String() string            { return proto.CompactTextString(m) }
func (*LogSnapshot) ProtoMessage()               {}
func (*LogSnapshot) Descriptor() ([]byte, []int) { return fileDescriptorMetamorphosis, []int{1} }

type LogSnapshot_SnapState struct {
	M map[string][]byte `protobuf:"bytes,1,rep,name=M" json:"M,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LogSnapshot_SnapState) Reset()         { *m = LogSnapshot_SnapState{} }
func (m *LogSnapshot_SnapState) String() string { return proto.CompactTextString(m) }
func (*LogSnapshot_SnapState) ProtoMessage()    {}
func (*LogSnapshot_SnapState) Descriptor() ([]byte, []int) {
	return fileDescriptorMetamorphosis, []int{1, 0}
}

type TopicMetadataSnapshot struct {
	TopicNameToDataStructureId map[string]string `protobuf:"bytes,1,rep,name=TopicNameToDataStructureId" json:"TopicNameToDataStructureId,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TopicMetadataSnapshot) Reset()         { *m = TopicMetadataSnapshot{} }
func (m *TopicMetadataSnapshot) String() string { return proto.CompactTextString(m) }
func (*TopicMetadataSnapshot) ProtoMessage()    {}
func (*TopicMetadataSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptorMetamorphosis, []int{2}
}

type TopicMetadataOperation struct {
	Name            string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DataStructureId string `protobuf:"bytes,2,opt,name=DataStructureId,proto3" json:"DataStructureId,omitempty"`
}

func (m *TopicMetadataOperation) Reset()         { *m = TopicMetadataOperation{} }
func (m *TopicMetadataOperation) String() string { return proto.CompactTextString(m) }
func (*TopicMetadataOperation) ProtoMessage()    {}
func (*TopicMetadataOperation) Descriptor() ([]byte, []int) {
	return fileDescriptorMetamorphosis, []int{3}
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "pb.LogEntry")
	proto.RegisterType((*LogSnapshot)(nil), "pb.LogSnapshot")
	proto.RegisterType((*LogSnapshot_SnapState)(nil), "pb.LogSnapshot.SnapState")
	proto.RegisterType((*TopicMetadataSnapshot)(nil), "pb.TopicMetadataSnapshot")
	proto.RegisterType((*TopicMetadataOperation)(nil), "pb.TopicMetadataOperation")
}
func (m *LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetamorphosis(dAtA, i, uint64(m.Offset))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetamorphosis(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetamorphosis(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Context != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMetamorphosis(dAtA, i, uint64(m.Context))
	}
	return i, nil
}

func (m *LogSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetamorphosis(dAtA, i, uint64(m.State.Size()))
		n1, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Log) > 0 {
		for _, msg := range m.Log {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMetamorphosis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BaseOffset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMetamorphosis(dAtA, i, uint64(m.BaseOffset))
	}
	return i, nil
}

func (m *LogSnapshot_SnapState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSnapshot_SnapState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, _ := range m.M {
			dAtA[i] = 0xa
			i++
			v := m.M[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovMetamorphosis(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovMetamorphosis(uint64(len(k))) + byteSize
			i = encodeVarintMetamorphosis(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMetamorphosis(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMetamorphosis(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func (m *TopicMetadataSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMetadataSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicNameToDataStructureId) > 0 {
		for k, _ := range m.TopicNameToDataStructureId {
			dAtA[i] = 0xa
			i++
			v := m.TopicNameToDataStructureId[k]
			mapSize := 1 + len(k) + sovMetamorphosis(uint64(len(k))) + 1 + len(v) + sovMetamorphosis(uint64(len(v)))
			i = encodeVarintMetamorphosis(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMetamorphosis(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintMetamorphosis(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *TopicMetadataOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMetadataOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetamorphosis(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DataStructureId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetamorphosis(dAtA, i, uint64(len(m.DataStructureId)))
		i += copy(dAtA[i:], m.DataStructureId)
	}
	return i, nil
}

func encodeVarintMetamorphosis(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogEntry) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovMetamorphosis(uint64(m.Offset))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMetamorphosis(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMetamorphosis(uint64(l))
	}
	if m.Context != 0 {
		n += 1 + sovMetamorphosis(uint64(m.Context))
	}
	return n
}

func (m *LogSnapshot) Size() (n int) {
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovMetamorphosis(uint64(l))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovMetamorphosis(uint64(l))
		}
	}
	if m.BaseOffset != 0 {
		n += 1 + sovMetamorphosis(uint64(m.BaseOffset))
	}
	return n
}

func (m *LogSnapshot_SnapState) Size() (n int) {
	var l int
	_ = l
	if len(m.M) > 0 {
		for k, v := range m.M {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMetamorphosis(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMetamorphosis(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMetamorphosis(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TopicMetadataSnapshot) Size() (n int) {
	var l int
	_ = l
	if len(m.TopicNameToDataStructureId) > 0 {
		for k, v := range m.TopicNameToDataStructureId {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMetamorphosis(uint64(len(k))) + 1 + len(v) + sovMetamorphosis(uint64(len(v)))
			n += mapEntrySize + 1 + sovMetamorphosis(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TopicMetadataOperation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetamorphosis(uint64(l))
	}
	l = len(m.DataStructureId)
	if l > 0 {
		n += 1 + l + sovMetamorphosis(uint64(l))
	}
	return n
}

func sovMetamorphosis(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetamorphosis(x uint64) (n int) {
	return sovMetamorphosis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetamorphosis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetamorphosis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetamorphosis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &LogSnapshot_SnapState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &LogEntry{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOffset", wireType)
			}
			m.BaseOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseOffset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetamorphosis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSnapshot_SnapState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetamorphosis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.M == nil {
				m.M = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetamorphosis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetamorphosis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMetamorphosis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetamorphosis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMetamorphosis
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetamorphosis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMetamorphosis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.M[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetamorphosis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMetadataSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetamorphosis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMetadataSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMetadataSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicNameToDataStructureId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicNameToDataStructureId == nil {
				m.TopicNameToDataStructureId = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetamorphosis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetamorphosis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMetamorphosis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetamorphosis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMetamorphosis
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetamorphosis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMetamorphosis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TopicNameToDataStructureId[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetamorphosis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMetadataOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetamorphosis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMetadataOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMetadataOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStructureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataStructureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetamorphosis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetamorphosis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetamorphosis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetamorphosis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetamorphosis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetamorphosis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetamorphosis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetamorphosis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetamorphosis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetamorphosis   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/metamorphosis.proto", fileDescriptorMetamorphosis) }

var fileDescriptorMetamorphosis = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x65, 0x6d, 0xa0, 0x65, 0x40, 0x6a, 0xb5, 0xa2, 0xc8, 0xf5, 0xc1, 0xb5, 0x38, 0xf9, 0x64,
	0x24, 0xda, 0x43, 0xdb, 0x23, 0x49, 0x0e, 0x51, 0x70, 0x90, 0x0c, 0xe2, 0xbe, 0x86, 0xc5, 0xa0,
	0x04, 0xef, 0xc6, 0x5e, 0xa2, 0xf8, 0x0f, 0x39, 0xf2, 0x09, 0x81, 0x3f, 0xc8, 0x1f, 0x44, 0xbb,
	0xeb, 0x20, 0x82, 0x42, 0xb8, 0xbd, 0xb7, 0x6f, 0xe6, 0xcd, 0x9b, 0xd1, 0x42, 0x8b, 0x47, 0x9d,
	0x25, 0x15, 0x64, 0xc9, 0x52, 0x3e, 0x67, 0xd9, 0x22, 0xf3, 0x79, 0xca, 0x04, 0xc3, 0x06, 0x8f,
	0xec, 0x66, 0xcc, 0x62, 0xa6, 0x68, 0x47, 0x22, 0xad, 0xb4, 0xa7, 0xf0, 0xb5, 0xcf, 0xe2, 0xab,
	0x44, 0xa4, 0x39, 0x6e, 0x41, 0x75, 0x30, 0x9b, 0x65, 0x54, 0x58, 0xc8, 0x45, 0x5e, 0x39, 0x2c,
	0x18, 0xfe, 0x0e, 0xe6, 0x0d, 0xcd, 0x2d, 0xc3, 0x45, 0x5e, 0x23, 0x94, 0x10, 0x37, 0xa1, 0x32,
	0x26, 0xf7, 0x2b, 0x6a, 0x99, 0xea, 0x4d, 0x13, 0x6c, 0xc1, 0x97, 0x0b, 0x96, 0x08, 0xfa, 0x24,
	0xac, 0xb2, 0x32, 0x78, 0xa3, 0xed, 0x17, 0x04, 0xf5, 0x3e, 0x8b, 0x87, 0x09, 0xe1, 0xd9, 0x9c,
	0x09, 0xdc, 0x81, 0xca, 0x50, 0x10, 0x41, 0xd5, 0xa0, 0x7a, 0xf7, 0xa7, 0xcf, 0x23, 0xff, 0x40,
	0xf7, 0x25, 0x50, 0x05, 0xa1, 0xae, 0xc3, 0x0e, 0x98, 0x7d, 0x16, 0x5b, 0x86, 0x6b, 0x7a, 0xf5,
	0x6e, 0xa3, 0x28, 0x57, 0xa9, 0x43, 0x29, 0x60, 0x07, 0xa0, 0x47, 0x32, 0x5a, 0xc4, 0x37, 0xd5,
	0xf4, 0x83, 0x17, 0xfb, 0x01, 0x6a, 0x7b, 0x4f, 0xec, 0x03, 0x0a, 0x2c, 0xa4, 0xac, 0xdc, 0x93,
	0x93, 0xfd, 0x40, 0xdb, 0xa3, 0xc0, 0xfe, 0x03, 0x55, 0x4d, 0xe4, 0x25, 0xee, 0x68, 0xae, 0x52,
	0xd7, 0x42, 0x09, 0xe5, 0x25, 0x1e, 0xd5, 0x25, 0xf4, 0x75, 0x34, 0xf9, 0x6f, 0xfc, 0x45, 0xed,
	0x2d, 0x82, 0x1f, 0x23, 0xc6, 0x17, 0x93, 0x80, 0x0a, 0x32, 0x25, 0x82, 0xec, 0xb7, 0xcf, 0xc1,
	0x56, 0xc2, 0x2d, 0x59, 0xd2, 0x11, 0xbb, 0x94, 0x92, 0x48, 0x57, 0x13, 0xb1, 0x4a, 0xe9, 0xf5,
	0xb4, 0x08, 0xf6, 0x4f, 0x06, 0xfb, 0xb0, 0xdd, 0x3f, 0xdd, 0xab, 0x13, 0x7f, 0x62, 0x6e, 0x07,
	0xf0, 0xeb, 0x4c, 0xfb, 0xb9, 0x1d, 0x6b, 0x87, 0x3b, 0x8e, 0xa1, 0xf5, 0x2e, 0xe3, 0x80, 0xd3,
	0x94, 0x88, 0x05, 0x4b, 0x30, 0x86, 0xb2, 0x9c, 0x51, 0xd8, 0x28, 0x8c, 0x3d, 0xf8, 0x76, 0xbc,
	0xac, 0x76, 0x3c, 0x7e, 0xee, 0x35, 0xd7, 0x5b, 0xa7, 0xb4, 0xd9, 0x3a, 0xa5, 0xf5, 0xce, 0x41,
	0x9b, 0x9d, 0x83, 0x9e, 0x77, 0x0e, 0x8a, 0xaa, 0xea, 0xcb, 0xfe, 0x7e, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x5d, 0xe3, 0xc9, 0x58, 0xe6, 0x02, 0x00, 0x00,
}
